{"ast":null,"code":"import _slicedToArray from \"/Users/eliafocarrasco/Desktop/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/eliafocarrasco/Desktop/book-search/client/src/pages/Books/Books.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport API from \"../../utils/API\";\nimport { Col, Row, Container } from \"../../components/Grid\";\nimport { List } from \"../../components/List\"; // import { Input, TextArea, FormBtn } from \"../../components/Form\";\n\nimport BookCard from \"./BookCard\";\n\nfunction Books() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1]; // const [formObject, setFormObject] = useState({})\n  // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n  // function handleInputChange(event) {\n  //   const { name, value } = event.target;\n  //   setFormObject({...formObject, [name]: value})\n  // };\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  // function handleFormSubmit(event) {\n  //   event.preventDefault();\n  //   if (formObject.title && formObject.author) {\n  //     API.saveBook({\n  //       title: formObject.title,\n  //       author: formObject.author,\n  //       synopsis: formObject.synopsis\n  //     })\n  //       .then(res => loadBooks())\n  //       .catch(err => console.log(err));\n  //   }\n  // };\n\n\n  return React.createElement(Container, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Col, {\n    size: \"md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Books On My List\")), books.length ? React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(BookCard, {\n    books: books,\n    deleteBook: deleteBook,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })) : React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/eliafocarrasco/Desktop/book-search/client/src/pages/Books/Books.js"],"names":["React","useEffect","useState","Jumbotron","API","Col","Row","Container","List","BookCard","Books","books","setBooks","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,uBAApC;AACA,SAASC,IAAT,QAAqB,uBAArB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,KAAT,GAAiB;AACf;AADe,kBAEWR,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,MAERS,KAFQ;AAAA,MAEDC,QAFC,kBAGf;AAEA;;;AACAX,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT,CANe,CAUf;;AACA,WAASA,SAAT,GAAqB;AACnBT,IAAAA,GAAG,CAACU,QAAJ,GACGC,IADH,CACQ,UAAAC,GAAG;AAAA,aACPJ,QAAQ,CAACI,GAAG,CAACC,IAAL,CADD;AAAA,KADX,EAIGC,KAJH,CAIS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAJZ;AAKD;;AAAA,GAjBc,CAmBf;;AACA,WAASG,UAAT,CAAoBC,EAApB,EAAwB;AACtBnB,IAAAA,GAAG,CAACkB,UAAJ,CAAeC,EAAf,EACGR,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIH,SAAS,EAAb;AAAA,KADX,EAEGK,KAFH,CAES,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAFZ;AAGD,GAxBc,CA0Bf;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,SACE,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,EAIGR,KAAK,CAACa,MAAN,GACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAwB,IAAA,UAAU,EAAEW,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BATJ,CADF,CADF,CADF;AAkBD;;AAGH,eAAeZ,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport API from \"../../utils/API\";\nimport { Col, Row, Container } from \"../../components/Grid\";\nimport { List } from \"../../components/List\";\n// import { Input, TextArea, FormBtn } from \"../../components/Form\";\nimport BookCard from \"./BookCard\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  // const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  // function handleInputChange(event) {\n  //   const { name, value } = event.target;\n  //   setFormObject({...formObject, [name]: value})\n  // };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  // function handleFormSubmit(event) {\n  //   event.preventDefault();\n  //   if (formObject.title && formObject.author) {\n  //     API.saveBook({\n  //       title: formObject.title,\n  //       author: formObject.author,\n  //       synopsis: formObject.synopsis\n  //     })\n  //       .then(res => loadBooks())\n  //       .catch(err => console.log(err));\n  //   }\n  // };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                <BookCard books={books} deleteBook={deleteBook}/>\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Books;"]},"metadata":{},"sourceType":"module"}